
=>Install React
npm create vite@latest
my-app
React 
Javascript 

cd myapp 
npm install 
npm run dev

=>React Router
https://reactrouter.com/en/main

cd my-app
npm install react-router-dom@latest (note: you can install from OS terminal as well)

=>React redux

https://redux.js.org/
1. install (React-Redux = npm install ract-redux)


npm install @reduxjs/toolkit
npm install redux
(or)
npm install @reduxjs/toolkit react-redux
-----------------------------------------------------------
Current Version "react": "^18.3.1", (9 Jan 2025)
=>React Hook
     React v16.8
     (just for Fuctional Compoents)

     useState()
     useEffect()
     useContext()

  
=>React Redux (third-party library) (current version =   "react-redux": "^9.2.0")
     global state management
     
     1.Store = to store Global state
     2.Actions = Function that describe what should happen
     3.Reducers = create logic functions to change "State"
     4.Dispatch = Mechanism to send actions to reducers
-----------------------------------------------------------
1. store: The Global State Container
     The store is the centralized place where all the global state of your application is stored. It holds the current state and provides methods to access and update that state.

     Purpose:

     To store the global state of your application.
     To allow components to access and update the state through Redux actions and reducers.

     The configureStore function accepts a reducer property, where you define all the reducers for your application.
     export default configureStore({
          reducer: {
               counter: counterReducer,
          },
     });
     Key Points:

     reducer is an object where each key represents a slice of the state, and the value is the corresponding reducer.
     Here, the counter key is associated with the counterReducer.
     The resulting global state will look like this:
     {
          counter: {
               value: 0, // Managed by counterReducer
          },
     }

     The state in the store is read-only, meaning you cannot modify it directly. Instead, you must use actions to make changes.

2. Actions:
     Actions are plain JavaScript objects that describe what you want to do. They represent an event that occurs in your application.

     Each action must have a type property, which tells the store what kind of action it is.
     You can also include additional data (payload) to describe the change.

3. Reducers:
     Reducers are pure functions that define how the state should change based on the action received.

     A reducer takes the current state and an action as inputs and returns a new state.
     The reducer is responsible for deciding how the state should be updated based on the action's type.

4. Dispatch:
     Dispatch is the mechanism used to send an action to the store.

     When you call store.dispatch(action), the action is sent to the reducer.
     The reducer processes the action and updates the state accordingly.

Why do we need to destructure counterSlice.actions?
     The actions object (counterSlice.actions) is automatically generated by createSlice based on the reducers you define.

     Each reducer function (e.g., increment, decrement) is turned into an action creator.
     Action creators are functions that return an action object (with type and payload).

1. Actions Object (Customer Requests)
The actions object contains all the predefined tasks (or requests) that a customer can ask for. Each task has a name and may include additional details.

2. Customer Service Role
The actions object acts like a menu of requests that the customer service representative (CSR) can handle. Customers can only ask for things on this menu, and the CSR ensures the request is properly formatted and passed to the responsible department.

3. Reducer as the Warehouse Worker
The reducer is like the warehouse worker who processes the requests from customer service.

Namespacing Actions:
Every action generated by the slice gets a type prefixed with the name property.
For example, if you name the slice counter, and define an action called increment, the action type will automatically be: